# 在现有项目中使用自定义的用户模型

关于自定义用户模型的使用，Django建议在新的项目一开始就使用自定义的用户模型，
目前，针对已有的项目，为了使用自定义用户模型而且保留原有数据，并没有官方的
教程，有的是一个ticket里面建议的方法，不能保证都能够成功。

目前自己部署的网站上文章还比较少，数据量小，可以做些尝试，换成使用自定义用户系统。

### 官方建议参考方式

以下是[ticket25313](https://code.djangoproject.com/ticket/25313)建议的在已有的项目中使用自定义用户模型
可以尝试的步骤：
> 1. Create a custom user model identical to auth.User, call it User (so many-to-many tables keep the same name) and set db_table='auth_user' (so it uses the same table)
 2. Throw away all your migrations
 3. Recreate a fresh set of migrations
 4. Sacrifice a chicken, perhaps two if you're anxious; also make a backup of your database
 5. Truncate the django_migrations table
 6. Fake-apply the new set of migrations
 7. Unset db_table, make other changes to the custom model, generate migrations, apply them

### 自己尝试的步骤

1. 备份数据库：`mysqldump -u root -p database > dbname.sql`在命令行执行，备份成功的话，
在目录下会有'dbname.sql'文件。
2. 创建一个新的应用`django-admin startapp users`，在应用的`models.py`文件中，新增自定义的
的用户模型，代码如下：
	# users/models.py 中自定义的User模型，名字和auth.User一样，叫User
	from django.contrib.auth.models import AbstractUser
	
	class User(AbstractUser):
	    pass
	
	    class Meta(AbstractUser.Meta):
	        db_table = 'auth_user'
3. 删除migrations文件，使用两个命令行命令：
        find . -path "*/migrations/*.py" -not -name "__init__.py" -delete
	find . -path "*/migrations/*.pyc" -delete`
4. 如果有第三方应用依赖于`auth.User`，先在配置文件和`projectname/urls.py`中注释掉对应的应用，
不然，可能会出现第三方应用的migrations文件与自定义的用户模型的migration文件冲突的情况，
我自己的项目启用了`admin`和`allauth`，于是就进行了注释。
5. 在`project.settings.py`文件中进行设置：`AUTH_USER_MODEL = 'users.User'`, 在依赖auth.User的
app中，我的是`blog/models.py`中的`Entry`模型，原来将`auth.User`作为外键，要使用自定义的
模型，需做如下修改：
	# blog/models.py
	from django.conf import settings
    	author = models.ForeignKey(settings.AUTH_USER_MODEL, verbose_name='作者',
       	                           on_delete=models.CASCADE)
6. 创建新的migrations，`python manage.py makemigrations`。
7. `python manage.py migrate --fake-initial`假的migrate.
8. 将第三方应用的注释取消，为了使用django自带的admin管理自定义用户模型，在`users/admin.py`文件
增加下列代码：
	#users/admin.py
	from django.contrib.auth.admin import UserAdmin
	from .models import User
	
	@admin.register(User)
	class OuserAdmin(UserAdmin):
	    list_display = ('username', 'email', 'is_staff', 'is_active', 'date_joined')
	    # fieldsets = (
	    #     ('基础信息', {'fields': (('username', 'email'))})
	    # )
	    filter_horizontal = ('groups', 'user_permissions',)
	    list_filter = ('is_staff', 'is_superuser', 'is_active', 'groups')
	    
	    
#### 参考

- Django官方的ticket[25313](https://code.djangoproject.com/ticket/25313)
- [Django数据迁移](http://www.seoerzone.com/article/mysql-copy/)
- [拓展User模型](https://www.zmrenwu.com/post/31/)
