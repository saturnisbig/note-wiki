# 第8章 文件和输入输出

阅读开始
2018-06-04 23:10:52 - 2018-06-04 23:33:16 (p317-p327)
2018-06-07 06:00:05 - 2018-06-07 06:22:08 (p328-p341)
阅读结束
笔记开始
2018-06-07 06:22:33 - 2018-06-07 06:45:35 
2018-06-08 05:35:08 - 2018-06-08 06:00:54 
2018-06-09 10:23:41 - 2018-06-09 11:07:23 
2018-06-09 13:17:32 - 2018-06-09 13:58:06 
笔记结束
练习开始
2018-06-09 13:58:16 - 2018-06-09 14:25:38 
2018-06-10 09:54:49 -  2018-06-10 13:23:13 
2018-06-29 15:38:02 - 2018-06-29 16:17:47 

本章将深入介绍Python的文件处理和相关输入输出能力。主要介绍了如下主题：
文件对象、文件内建函数、文件内建方法、文件内建属性、标准文件、
命令行参数、文件系统、文件执行、持久存储、相关模块。


##### 文件对象

不仅可以用来访问普通的磁盘文件，也可以访问任何其他类型的抽象层面上的“文件”。
一旦设置合适的“钩子”，就可以访问具有文件类型接口的其他对象，就像访问的是普通
文件一样。

`open()`返回一个文件对象，该对象用于后续修改操作。


##### 文件内建函数open和file

基本语法：`file_object = open(file_name, access_mode='r', buffering=-1)`

file_name是包含要打开的文件名的字符串，可以是相对路径或绝对路径。

access_mode也是一个字符串，代表文件的打开模式，类似C语言，有rwa等模式，
分别代表读取、写入、追加，还有个U模式，代表通用换行符支持。使用r和U模式打开
的文件必须是已经存在的。使用w模式打开的文件，若存在，则先清空，然后创建。以
a模式打开的文件为数据追加做准备，所写入的数据都将追加到文件的末尾，即使打开
文件后seek到其他地方。如果文件不存在，就会创建。

fopen支持的模式也可以工作在Python的open下。包括+代表可读写，b代表二进制。
对于所有POSIX兼容的Unix系统，b是可有可无的，因为把所有的文件都当做二进制，
包括文本文件。如果你要处理一个二进制文件且打算一直到其他非Unix环境，加上b
是个好主意。

buffering用于指示访问文件所采用的缓冲方式。其中0表示不缓冲，1表示
只缓冲一行数据，任何大于1的值代表使用给定值作为缓冲区大小。不提供或为负值，
表示使用系统默认的缓冲机制，一般默认即可。

文件对象的访问模式：
r相关的：r以读方式打开；rU或Ua以r方式打开同时支持通用换行符；r+以读写方式打开；
rb以二进制读方式打开；rb+以二进制读写模式打开。
w相关的：w以写方式打开；w+以读写模式打开；wb以二进制写模式打开；wb+以二进制模式打开。
a相关的：a以追加模式打开；a+以读写模式打开；ab以二进制追加模式打开；ab+以二进制读写模式打开。

- 工厂函数`file()`

与`open`有相同的功能，一般来说，建议使用open来读写文件，在想说明正在处理的是文件
的时候使用`file`，例如`if instance(f, file)`。

- 通用换行符支持（UNS）PEP278

不同平台用来表示换行的符号是不同的，例如\n，\r，或者\r\n。所以Python的解释器也要
处理这样的任务，特别是在导入模块时分外重要。

作为PEP238的结果，Python2.3引入了UNS，当使用U标志打开文件时，所有的行分割符（或
行结束符，无论它原来是什么）通过Python的输入方法（例如read*()返回时都会被替换为
换行符NEWLINE(\n)。这个特性还支持包含不同类型行结束符的文件。

文件对象的newlines属性会记录它曾看到的文件行结束符，若文件刚打开，还没遇到行结束
符，则值为None。在第一行被读取后，设置为第一行的行结束符。如果遇到其他类型的行
结束符，则被设置为包含每种格式的元组。
*UNS只用于读取文件，没有对应的处理文件输出的方法。*

,核心笔记：不同系统下的行分隔符*
在POSIX（Unix系列或Mac OSX）系统上，是(\n)字符，
在旧的MacOS下是\r，而DOS和Wind32下结合使用了两者\r\n。

os模块用于跨平台的属性：linesep 文件中分隔行的字符串；sep分隔文件路径名的字符串，
pathsep分隔文件路径的字符串；curdir当前工作目录的字符串名称；pardir父目录字符串
名称。

##### 文件内建方法

`open()`成功执行并返回一个文件对象后，所有对该文件对象的操作都将通过
“句柄”进行，文件操作可以分为四类：输入、输出、文件内移动以及其他杂项
的操作。

- 输入

`read()`读取给定数目的字节到字符串中，如果没有size参数或者size为负，将
读至文件末尾。

`readline()`读取整行，包括行结束符。也接受size参数，如果行长超过size，
则返回不完整的行。

`readlines()`返回一个行的字符串列表。

- 输出

`write()`功能与read和readline相反，把数据写入文件中。

`writelines()`接受字符串列表，将列表写入文件，换行符不会被自动加入，如果
有需要，必须自己加上。

核心笔记：保留行分隔符。通过文件句柄进行读取和写入操作时，Python不会帮
你删除或者添加行结束符。

- 文件内移动

`seek()`将文件指针移动到不同的位置，offset代表相对某个位置的偏移量，位置
默认值为0，代表从文件开头算起，1代表从当前位置，2代表从文件末尾，对应
的常量SEEK_SET、SEEK_CUR、SEEK_END。

`text()`告诉当前文件中的位置。

- 文件迭代

`for eachline in f`

文件迭代更为高。

- 其他
 
`close()`关闭文件结束访问

`fileno()`返回打开文件的描述符，是个整数，可以用在os模块的一些底层操作

`flush()`方法会把内部缓冲区中的内容直接写入文件，而不是被动等待。
isatty()是否一个tty设备，是返回True，否返回False。truncate()将
文件截取到当前文件指针位置或者到给定的size，以字节为单位。

- 杂项方法

```python
filename = raw_input('Enter file name:')
fobj = open(filename, 'w')
while True:
    aLine = raw_input('Enter a line("." to quit): ')
    if aLine != ".":
        fobj.write('%s%s' % (aLine, os.linesep))
    else:
        break
fobj.close()
```

##### 文件内建属性

file.closed 	True已被关闭，否则为False
file.encoding 	文件所用编码
file.mode	文件打开时使用的访问模式
file.newlines   文件分隔符
file.name	文件名


##### 标准文件

sys.stdin标准输入

sys.stdout标准输出

sys.stderr标准错误。

##### 命令行参数

sys.argv 是命令行参数的列表
len(sys.argv) 是命令行参数的个数

##### 文件系统

对文件系统的访问大多通过Python的os模块，该模块是Python访问操作系统功能
的主要接口，os实际上调用的模块依赖与所使用的系统。

此外os模块还负责大部分文件系统的操作，包括删除、重命名、遍历目录等操作。
os.path可以完成一些针对路径名的操作，提供的函数可以完成管理和操作文件
路径名中的各个部分，获取文件或子目录信息，文件路径查询等操作。

两个模块提供了平台无关的统一的文件系统访问方法。

*核心模块：os(和os.path)*
两个模块提供了访问计算机文件系统的不同方法，os模块可以完成更多的工作。
可以通过它管理进程环境，甚至可以让一个Python程序和另外一个执行中的程序对话。
更多内容可以参阅第14章。

##### 永久存储模块

永久存储可以把用户的数据归档保存起来供以后使用，这样就可以避免输入重复
的信息。在简单的磁盘文件不能满足你的需求，使用关系数据库又有些大材小用
时，就可以考虑使用永久性存储模块。

主要有三个模块：pickle marshal shelve

pickle和marshal都可以对Python对象进行存储转换，区别在于marshal只能处理
简单的Python对象（数字、序列、映射以及代码对象），pickle还可以处理递归
对象，被不同地方多次引用的对象，以及用户自定义的类和实例。pickle的增强
版是用C语言写的cPickle。

shelve模块使用anydbm模块寻找合适的DBM模块，然后使用cPickle来完成对存储
转换过程，允许对数据库文件进行并发操作，但不允许共享读/写访问。

##### 相关模块

base64		提供二进制字符串和文本字符串间的编码/解码操作
binascii	提供二进制和asci编码的二进制字符串间的编解码操作
bz2 		访问bz2格式的压缩文件
csv		访问csv文件
filecmp		比较目录和文件
fileinput	提供多个文本文件的行迭代器
getopt/optparse	命令行参数的解析和处理
glob/fnmatch	Unix样式的通配符匹配功能
shutil		高级文件的访问
c/StringIO	对字符串对象提供类文件接口
tarfile		读写TAR归档文件
tempfile	创建一个临时文件（名）
uu		格式的编码和解码
zipfile		读取zip归档文件的工具

os.path.expanduser()传递一个带波浪号的目录，会返回对应的绝对路径。


