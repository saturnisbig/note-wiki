# 第九章 函数与函数式编程

阅读开始
2018-07-07 07:39:51 - 2018-07-07 07:57:42 
2018-07-09 21:11:30 - 2018-07-09 21:53:14 
2018-08-31 05:46:03 - 2018-08-31 06:18:19 (p389-p400)
2018-09-01 06:44:51 - 2018-09-01 07:47:10 (p400-p416)
函数式编程，看到偏函数
2018-09-05 23:02:03 - 2018-09-05 23:33:17 (p417-p426)
2018-09-06 22:50:10 - 2018-09-06 23:11:16 (p426-p430)
2018-09-11 13:01:35 - 2018-09-11 14:04:48 (p430-p439)
变量作用域, 生成器(PEP255, PEP342)
2018-09-12 06:31:19 - 2018-09-12 06:59:42 (p439-p444)
递归与生成器
2018-09-13 13:13:08 - 2018-09-13 13:30:01 (p444-p446)

阅读笔记：
2018-09-01 07:47:26 - 2018-09-01 07:57:42 
2018-09-02 07:10:15 - 2018-09-02 07:59:42 
2018-09-02 08:06:33 - 2018-09-02 08:46:54 
2018-09-04 05:48:38 - 2018-09-04 06:24:28 

练习：
2018-09-13 13:30:10 - 2018-09-13 13:53:25 (1-3)
2018-09-15 15:14:22 - 2018-09-15 16:54:35 (4-12)
2018-09-15 21:45:51 - 2018-09-15 22:44:07 (13-19, except 16, 18)

11.8 [[Python的变量作用域]] -- 2018-09-11 13:07:47 
#### 什么是函数

函数是对程序逻辑进行结构化或过程化的一种编程方法。能将整块代码巧妙地隔离成易于管理
的小块，把重复的代码放到函数中而不是进行大量的拷贝--这样既能节省空间又有助于保持一
致性。

函数可以以不同的形式出现，举几个简单的例子：
```python
declaration / definition  	def foo(): print 'bar'
function object / reference	foo
function call / invocation	foo()
```

##### 函数vs过程

函数会有返回值且接收参数，过程是简单、特殊、没有返回值的函数。

##### 返回值与函数类型

函数会向调用者返回一个值，而实际过程中大多接近过程，不显示的返回任何东西，
Python没有显示返回的时候会返回None。Python里的函数还可以返回一个值或者对
象，在返回容器对象时，看起来像是能返回多个对象。

许多静态类型语言主张一个函数的返回类型就是其返回值的类型。在Python中，由
于Python是动态地确定类型而且函数能返回不同类型的值，所以没有进行直接的类
型关联。

#### 调用函数

##### 函数操作符

`()`圆括号表示函数调用，任何输入的参数都必须放置在括号中。

##### 关键字参数

关键字参数的概念仅针对函数的调用，这种理念让调用者通过函数调用中的参数
名字来区分参数，这样规范允许参数缺失或者不按顺序。例子：

```python
def foo(x):
    foo_suite # presumably does some processing with 'x'
# 标准调用 foo():foo(42) foo('bar') foo(y)
# 关键字调用 foo(): foo(x=42) foo(x='bar')

def net_conn(host, port):
    net_conn_suite
# 标准调用： net_conn('kappa', 8080)
# 关键字调用：net_conn(port=8080, host='kappa')
```

##### 默认参数

默认参数就是声明了默认值的参数，函数调用时，不像该函数传入参数也是允许的。

##### 参数组

Python同样允许程序员执行一个没有显示定义参数的函数，相应的方法是通过一个
把元组（非关键字参数）或字典（关键字参数）作为参数组传递给函数。

`func(*tuple_grp_nonkw_args, **dict_grp_kw_args)`

#### 创建函数

##### def语句

函数使用def语句来创建的，语法如下：

```python
def function_name(arguments):
    "function_document_string"
    function_body_suite
```

##### 声明和定义比较

Python将声明和定义视为一体，函数的子句由声明的标题行以及随后的定义体组成。

##### 前向引用

和其他语言一样，Python也不允许在函数未声明前，对其进行引用或调用。

```python
def foo():
    print 'in foo()'
    bar()
    
def bar():
    print 'in bar()'
    
>>> foo()
```

上述示例代码中，`bar`的定义放在`foo`之后也是允许的，因为在对`foo`进行调用的
时候，`bar`已经定义了，这样在`foo`中对`bar`的调用就不会出现前向引用的问题。

##### 函数属性

函数属性是另一个使用了句点属性标识并拥有命名空间的领域。可以在函数声明
内部进行设置，也可以在函数声明外定义，比如函数的文档字符串`func.__doc__="..."`
然而，不能在函数的声明中访问属性，因为函数不想类的方法有`self`这样的东西
来实现对自身的引用。

```python
def foo():
    'foo() -- properly created doc string'
    
def bar():
    pass
    
bar.__doc__ = 'Oops, forgot the doc string above.'
bar.version = 0.1

>>> help(foo)
...
>>> print bar.version
0.1
```

##### 内部/内嵌函数

Python允许在函数体内部创建另一个函数（对象），这种函数就叫内部/嵌套函数。
创建内部函数的一种方法是在外部函数的定义体内定义函数(用def关键字)，另一种
方式是使用lambda语句。

内部函数的作用域仅限在其外部函数的作用域，如果内部函数中包含对外部函数定义
对象的引用(这个对象甚至可以在外部函数之外)，内部函数会变成闭包。

##### 函数（与方法）装饰器

装饰器的语法以@开头，接着是装饰器函数的名字和可选参数，紧跟着装饰器的声明
的是被修饰的函数，和装饰函数的可选参数：
```python
@decorator(dec_opt_args)
def func2Bdecorated(func_opt_args):
    pass

@deco2
@deco1
def func(arg1, arg2, ...): pass
```
装饰器实际上就是函数，接受函数对象，使用装饰器修饰函数时，我们可以在合适
的时机调用被修饰的函数，在执行该函数之前，我们在装饰器函数中运行一些预备
的代码，如post-morrem分析，也可以在函数执行后做一些清理工作。

所以，当看到一个装饰器函数时，很可能在里面找到一些代码，定义了某个函数，
并在定义内的某处嵌入了对目标函数的调用或者至少一些引用。

装饰器可以用来引入日志，增加计时逻辑来检测性能、给函数加入失误的能力等。

```python
#! /usr/bin/env python

from time import ctime, sleep

def tsfunc(func):
    def wrappedFunc():
        print '[%s] %s() called' % (ctime(), func.__name__)
	return func()
    return wrappedFunc

@tsfunc
def foo(): pass

foo()
sleep(4)
for i in range(2)
    sleep(1)
    foo()
    
# 运行结果
[Sun Mar 19 22:50:28 2006] foo() called
[Sun Mar 19 22:50:33 2006] foo() called
[Sun Mar 19 22:50:34 2006] foo() called
```

#### 传递函数

在Python中，所有的对象都是通过引用来传递的，函数也是对像。
函数可以作为一般的变量一样进行赋值，也可以作为函数的参数进行传递。

#### 形式参数

形式参数指的是函数声明时所包括的所有的参数，调用函数时必须提供与声明中匹配
的参数。

##### 位置参数

调用函数时参数的传递的顺序必须与声明时一致，如果没有默认参数，则数量上也
要一样。

##### 默认参数

函数调用时，如果没有为默认参数提供值则使用默认参数自带的默认值。
Python中，使用默认值声明变量时，所有位置参数必须出现在任何一个默认参数之前。
```python
def func(posargs, defarg1=dval1, defarg2=dval2,...):
    "function_document_string"
    function_body_suite
```

为什么使用默认值？一是提高程序的健壮性，补充了位置参数没有提供的一些灵活性。
二是使开发者更好地控制为顾客开发的软件。

为什么位置参数要在默认参数前？因为位置参数是强制性的而默认参数不是。从句法
构成上看，对于解释器来说，如果允许混合模式，将无法确定什么值来匹配什么参数。
如果没有按正确的顺序给出参数，就会产生语法错误。

#### 可变长度参数

有时可能会需要函数处理可变数量参数的情况（类似C中的未知数量参数），就要用到
可变长度的参数列表。变长的参数在函数声明中不是显式命名的，因为参数在运行之前
是未知的。

Python支持关键字及非关键字两种可变长参数类型,在调用时使用*和**来指定元祖和字
典的元素作为非关键字及关键字参数的方法。

##### 非关键字可变长参数（元组）

当函数调用的时候，所有的参数（必须的和默认的）都将赋值给在函数声明中相对应的
局部变量，剩下的非关键字参数按顺序插入到一个元组中便于访问。

*可变长的参数元组必须在位置和默认参数之后*，语法如下：
```python
def function_name([formal_args,] *vargs_tuple):
    "function_documentation_string"
    function_body_suite
```
*操作符之后的形参将作为元组传递给函数，元组保存了所有传递给函数的"额外"的参
数（匹配了所有位置和默认参数后剩余的）。如果没有额外的参数，元组为空。

```python
def tupleVarArgs(arg1, arg2='defaultB', *theRest):
    'display regular args and non-keyword variable args'
    print 'formal arg 1:', arg1
    print 'formal arg 2:', arg2
    for eachXtrArg in theRest:
        print 'another arg:', eachXtrArg

>>> tupleVarArgs('abc')
formal arg 1: abc
formal arg 2: defaultB
>>> tupleVarArgs(23, 4.56)
formal arg 1: 23
formal arg2: 4.56
>>> tupleVarArgs('abc', 123, 'xyz', 456.789)
formal arg 1: abc
formal arg 2: 123
another arg: xyz
another arg: 456.789
```
##### 关键字变量参数(Dictionary)

def function_name([formal args,] [*vargst,] **vargsd):
    function_body_suite

关键字参数使用了`**`双星号，该符号被重载以便不与幂运算发生混淆。关键字参数应
作为函数的最后一个参数，示例如下：

```python
def dictVarArgs(arg1, arg2='defaultB', **theRest):
    'display 2 regular args and keyword variable args'
    print 'formal arg1:', arg1
    print 'formal arg2:', arg2
    for eachXtrArg in theRest.keys():
        print 'Xtra arg %s: %s' % (eachXtrArg, str(theRest[eachXtrArg]))

>>> dictVarArgs(1220, 740.0, c='grail')
formal arg1: 1220
formal arg2: 740.0
Xtra arg c: grail
>>>
>>> dictVarArgs(arg2='tales', c=123, d='poe', arg1='mystery')
formal arg1: mystery
formal arg2: tales
Xtra arg c: 123
Xtra arg d: poe
>>>
>>> dictVarArgs('one', d=10, e='zoo', men=('freud', 'gaudi'))
formal arg1: one
formal arg2: defaultB
Xtra arg men: ('freud', 'gaudi')
Xtra arg d: 10
Xtra arg e: zoo
```

##### 调用带有可变长参数对象的函数

对`def newfoo(arg1, arg2, *nkw, **kw)`的函数声明，可以用如下方式调用：

```python
>>> newfoo(10, 20, 30, 40, foo=50, bar=60)
>>>
>>> newfoo(2, 4, *(6, 8), **{'foo': 10, 'bar': 12})
>>> aTuple = (6, 7, 8)
>>> aDict = {'z': 0}
>>> newfoo(1, 2, 3, x=4, y=5, *aTuple, **aDict)
arg1 is: 1
arg2 is: 2
additional non-keyword arg: 3
additional non-keyword arg: 6
additional non-keyword arg: 7
additional non-keyword arg: 8
additional keyword arg 'z': 9
additional keyword arg 'x': 4
additional keyword arg 'y': 5

# 被调函数中最终接受的元组和字典的子集包含了参数列表中的所有额外的非关键字和关键字参数。
例子中额外的非关键字参数'3', 关键字参数'x'和'y'也都被包含进最终的参数里。
```


