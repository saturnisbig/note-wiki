# Selenium基础知识

2017-04-24 22:40:59 - 2017-04-24 22:53:02
一种自动化测试工具，支持各种浏览器，如果在浏览器上安装selenium插件，则可以方便
的进行测试，PhantomJS也是浏览器，selenium同样支持。

selenium支持多种语言，包括Python，这样就可以使用Python+phantomjs+selenium的组合
来实现自动化测试。

2017-04-25 06:47:44 - 2017-04-25 07:28:07

控制浏览器打开一个页面：

    from selenium import webdriver
    browser = webdriver.Chrome()
    browser.get('http://www.baidu.com')
    
    
模拟提交：

    from selenium import webdriver
    from selenium.webdriver.common.keys import Keys
    
    driver = webdriver.Chrome()
    driver.get('http://www.python.org')
    assert 'Python' in driver.title
    elem = driver.find_element_by_name('q')
    elem.send_keys('pycon')
    elem.send_keys(Keys.RETURN)
    print dirver.page_source

测试用例：


页面操作
2017-04-25 20:05:59 - 2017-04-25 21:04:39
- 页面交互（点击、输入等）
获取元素的方法：

    element = driver.find_element_by_id('passwd_id')
    element = driver.find_element_by_name('passwd')
    element = driver.find_elements_by_tag_name('input')
    element = driver.find_elements_by_xpath('//input[@id="passwd_id"]')
    # 向获取的的元素发送数据，模拟点击按钮
    element.send_keys('some text')
    element.send_keys('and some', Keys.ARROW_DOWN)
    # 清除文本数据
    element.clear()

- 填充表单（根据需要看文档吧）
处理下拉选项的示例：
    # 笨方法
    element = driver.find_element_by_xpath('//select[@name="name"]'))
    all_options = element.find_element_by_name('option')
    for option in all_options:
        print('Value is: %s' % option.get_attribute('value'))
	option.click()
    # 使用selenium自带的类Select
    from selenium.webdriver.support.ui import Select
    select = Select(driver.find_element_by_name('name'))
    select.select_by_index(index)
    select.select_by_visible_text('text')
    select.select_by_value(value)
    # 取消所有选择
    select.deselect_all()
    # 获取已选
    all_selected_options = select.all_selected_options
    # 提交
    driver.find_element_by_id('submit').click()

- 元素拖拽（利用ActionChains类来实现）

    # 实现从source到target的操作
    element = driver.find_element_by_name('source')
    target = dirver.find_element_by_name('target')
    from selenium.webdriver import ActionChains
    action_chains = ActionChains(driver)
    action_chains.drag_and_drop(element, target).perform()
    
- 页面切换（利用`switch_to_window`来实现）

    driver.switch_to_window('windowName')
    for handle in driver.window_handles:
        driver.switch_to_window(handle)
    # 切换到name为child的frame上
    driver.switch_to_frame('frameName.0.child')
    
- 弹窗处理

    alert = driver.switch_to_alert()

- 历史记录

    driver.forward()
    driver.back()
    
- Cookie处理

    driver.get('http://www.example.com')
    cookie = {'name': 'foo', 'value': 'bar'}
    driver.add_cookie(cookie)
    # 获取当前url的cookie
    driver.get_cookies()
    
- 元素的选取方法

    # 单个元素选取
    find_element_by_id(name, xpath, link_text, partial_link_text, tag_name, class_name,
                      css_selector)
    # 多个元素选取
    find_elements_by_name(xpath, link_text, partial_link_text, tag_name, class_name, css_selector)
    # 还可通过By来确定选取的方式
    from selenium.webdriver.common.by import By
    driver.find_element(By.XPATh, '//button[text()=="Some text"]')
    driver.find_element(By.XPATh, '//button')
 
 ### 页面等待
 
 现在网页使用Ajax技术的越来越多，程序不能确定何时某个元素是否加载出来了，这会让元素的
 定位很困难，从而提高抛出ElementNotVisibleException的概率。
 
 所以selenuim提供了2中等待方式，一种是隐式等待（等待某段时间），一种式显式等待（指定某一条件成立时继续执行）。
 
    # 显式等待
    from selenium import webdriver
    from selenium.webdriver.common.by import By
    from selenium.webdriver.support.ui import WebDriverWait
    from selenium.webdriver.support import expected_condition as EC
    
    driver = webdriver.Chrome()
    driver.get('http://www.somedomain/url_that_delays_loading')
    try:
        element = WebDriverWait(driver, 10).until(
	    EC.presence_of_element_located(By.ID, 'myDynamicElement')
	)
    finally:
        driver.quit()
    # 或者
    wait = WebDriverWait(driver, 10)
    element = wait.until(EC.element_to_be_clickable(By.ID, 'someid'))
    # 隐式等待
    driver.implicitly_wait(10)
    driver.get('http://www.somedomain/url_that_delays_loading')
    dynamic_element = driver.find_elemet_by_id('dddd')
 
