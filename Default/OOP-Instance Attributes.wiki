# Ch13.6 OOP Instance Attributes

2018-11-07 00:15:31 - 2018-11-07 00:39:19 

##### 初始化实例属性
`__init__()`方法是创建实例属性的第一个地方，可以设置默认的属性值。
该方法的返回值必须为`None`，否则会抛出异常。

##### 查看实例属性

`dir()`内置方法可以查看实例的属性，实例的特殊属性`__dict__`代表
的是属性名称与属性值的字典。

##### 特殊实例属性

`I.__class__`：用来实例化I的类名称

`I.__dict__`：实例I的属性字典

*核心风格*
修改`__dict__`：虽然类和实例的该特殊属性都是可变的，但是一般不
建议直接修改该值，除非你对自己修改的属性很了解。一般推荐使用
点概念来访问和修改属性的值。可能需要修改该属性的一种情况是，
当你重写`__setattr__`特殊方法时。

##### 内置类型属性

##### 实例属性和类属性比较

对这两种属性的访问一般是通过实例或类来进行，其中通过实例变量
可以访问类的属性，如果通过实例变量对属性进行设置，则会为该实例
创建一与类属性同名的属性，通过实例访问该属性时，值是刚设置的值。
直到该属性被删除，则通过实例访问该属性才是类的同名属性的值。
所以，当使用实例访问类的属性时要注意。

*核心建议*
同一个类的不同实例各自有自己的属性，值存在特殊变量`__dict__`中，
在Python中，没有办法提示你是要修改同名的类属性还是实例属性，
因此，当要修改类属性值时请修改类的属性而不是同名的实例属性。

但是如果类的属性是可变的类型，则通过实例变量设置该属性的值，会
影响到类的同名属性。

```python
class Foo(object):
    x = {2003: 'poe2'}
    
>>> foo = Foo()
>>> foo.x
{2003: 'poe2'}
>>> foo.x[2004] = 'valid path'
>>> foo.x
{2003: 'poe2', 2004:'valid path'}
>>> Foo.x
{2003: 'poe2', 2004:'valid path'}
>>> del foo.x
raise error
```

类的属性存在的生命周期更长。
