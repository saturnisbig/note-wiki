# Macros

2017-06-07 13:34:37 - 2017-06-07 13:52:56 (p157-p161)

64. Record and Execute a Macro. p158

宏能够记录一系列的命令（修改），然后重复执行。
`q{register}`启用宏，并将操作记录保存在寄存器中，
`@{register}, :h @`重新执行记录在寄存器中的命令，`@@`执行最近刚执行的宏操作。

65. Normalize, Strike, Abort. p161
在Vim中使用宏可能会出现意料之外的结果，作者建议遵循最佳实践：
在做宏记录的时候，每个命令都是可重复的。在开始记录前，问下你在什么位置，
从哪里来，要去往哪里，确保鼠标在正确的位置，下一个命令执行你想执行的命令。

移动的时候基于单词的比基于字符的好，确保命令是能够被重复的，禁止使用鼠标。

2017-06-08 13:39:47 - 2017-06-08 14:06:23 (p162-p168)

66. Play Back with a Count. p163

问题：
原来的：`var foo = "method("+argument1+","+"argument2+")"`,
想要的：`var foo = "method(" + argument1 + "," + argument2 + ")"`
`;.`不能重复执行，所以需要启用宏，`qq;.q`, `22@q`

67. Repeat a Change on Contiguous Lines. p164
我们能够在一定范围内的行内重复一些操作，先记录宏，接着在每行上执行。可以用两种方式，
并行和序列进行。

例子在'macros/consecutive-lines.txt'
如何并行执行？采用命令行的方式，记录宏，视图模式选择，命令行模式并行执行。

2017-06-12 13:24:00 - 2017-06-12 13:47:01 (p169-p174)
68. Append Commands to a Macro. p169
我们可能会漏掉一些关键的步骤，在记录宏的时候，没必要重新录，我们可以在已录
的命令后面增加一些额外的命令。
当使用qa命令时，我们将宏录制并保存到a寄存器中；增加命令的方式是：qA，这样就
可以在原来的寄存器后面增加新的命令。 *该命令仅对在后面增加命令的有效*

69. Act Upon a Collection of Files. p170

并行方式：在多个文件中执行宏。`:args *.rb`在缓存中打开当前目录下所有的.rb格式文件，
`:args`查看缓存列表操作的方式，`argdo normal @a`让每个`:args`中的文件执行宏命令
串行方式：`qA, :next, q, 22@a`，增加跳到下一个的命令，然后重复多次执行。

2017-06-14 07:03:55 - 2017-06-14 07:29:30 (p174-p177)

70. Evaluate an Iterator to Number Items in a list. p174
想为有序列表插入前面的序号，如何实现？可以<C-a>和<C-x>加上count的方式，
或者是用表达式寄存器，这里采用的是表达式寄存器。
`:let i=1, qa, I<C-r>=i<CR>, :let i+=1, q, jVG, :'<,'>normal @a`

71. Edit the content of a Macro. p176
`~`改变当前光标下字母的大小写，后鼠标移到右边，可以加上count。
`vU, :h v_U`将光标下的字母变成大写。
`p`将内容复制到当前光标的后面，`:put`总是将内容复制到当前行的下一行。

*将宏的内容复制到文本中*
`:put a`
*将修改后的宏内容复制回寄存器中*
`"add`但是存在问题，dd是行敏感，会加入换行符，保险的方式是用字符敏感的复制会
寄存器中。`"ay$`
当然也可以使用vim脚本来进行替换`:let @a=substitute(@a, '\~', 'vU', 'g')`
`:h substitute(), :h function-list`

2017-06-14 13:01:08 - 2017-06-14 13:07:37 (p178-p179)






