# Requests and Response

2017-06-20 06:49:50 - 2017-06-20 06:59:59
2017-06-20 22:56:02 - 2017-06-20 23:25:33

二者用于抓取网页，通常Req在爬虫中生成，在系统在传递，直到
碰到Downloader，执行request然后返回一个Response对象，回到生成该
请求的爬虫中。

二者都有相应的子类用于实现额外的功能。

## Request objects
`scrapy.http.Request(url[,callback,method='GET',headers,body,cookies,meta,encoding='utf-8',priority=0,dont_filter=False,errback,flags])`
相应的参数

*传递额外的参数给回调函数*
示例：
	def parse_page1(self, response):
	    return scrapy.Request("http://www.example.com/some_page.html",
				  callback=self.parse_page2)
				  
	def parse_page2(self, response):
	    self.logger.info("Visited %s", response.url)
	    
	# 传递参数的版本
	def parse_page1(self, response):
	    item = MyItem()
	    item['main_url'] = response.url
	    request = scrapy.Request("http://www.example.com/some_page.html,",
				     callback=self.parse_page2)
	    request.meta['item'] = item
	    yield request
	    
	def parse_page2(self, response):
	    item = response.meta['item']
	    item['other_url'] = response.url
	    yield item
    
2017-06-21 21:18:25 - 
*Using errback to catch exceptions in request processing*
errback请求当触发异常的时候被调用，接受Twisted Failure实例作为第一个参数，
可以用于跟踪链接是否建立、超时、DNS解析错误等。例子：

	import scrapy
	from scrapy.spidermiddlewares.httperror import HttpError
	from twisted.internet.error import DNSLookupError
	from twisted.internet.error import TimeoutError, TCPTimedOutError

	class ErrbackSpider(scrapy.Spider):
	    name = 'errback_example'
	    start_urls = [
		"http://www.httpbin.org/",              # HTTP 200 expected
		"http://www.httpbin.org/status/404",    # Not found error
		"http://www.httpbin.org/status/500",    # server issue
		"http://www.httpbin.org:12345/",        # non-responding host, timeout expected
		"http://www.httphttpbinbin.org/",       # DNS error expected
	    ]

	    def start_requests(self):
		for u in self.start_urls:
		    yield scrapy.Request(u, callback=self.parse_httpbin,
					 errback=self.errback_httpbin,
					 dont_filter=True)

	    def parse_httpbin(self, response):
		self.logger.info('Got successful response from {}.format(response.url)')

	    def errback_httpbin(self, failure):
		# log all failures
		self.logger.error(repr(failure))
		if failure.check(HttpError):
		    response = failure.value.response
		    self.logger.error('HttpError on %s', response.url)
		elif failure.check(DNSLookupError):
		    request = failure.request
		    self.logger.error('DNSLookupError on %s', request.url)
		elif failure.check(TimeoutError, TCPTimeOutError):
		    request = failure.request
		    self.logger.error('TimeoutError on %s', request.url)


Request.meta特殊键值，在传递参数的时候要注意不要和这些特殊值重名。

### Request subclasses
FormRequest objects:用于处理带表格的请求



