# Ch10-Copy and Paste

2017-06-02 13:17:18 - 2017-06-02 13:48:09 (p141-p146)

59. Delete, Yank, and Put with Vim's Unnamed Register. p141
`xp`更换字符位置，光标下和光标后的；
`ddp`更换两行的位置
`yyp`复制行
`yiw`复制单词，不包括单词后的空格，`yw`会连空格一起复制
`diw`删除单词

60. Grok Vim's Registers. p144
`"{register}`在名为register的寄存器上操作，默认是到无名寄存器
`""`无名寄存器，`x, s, d{motion}, c{motion}, y{motion}`都是用的无名寄存器
`"0`复制寄存器，当时用yank命令的时候，会将文本存到无名和该寄存器

2017-06-03 08:55:51 - 2017-06-03 09:40:59 (p147-p151)
字母表上的每个字母都有对应的寄存器，`:h quote_alpha`，大写的是Append，
小写字母寄存器会重写原有的内容。

`"_`黑洞寄存器，如果不想让无名寄存器被重写，就可以将要删除的内容放
到黑洞寄存器里。

`"+`系统剪贴板寄存器，要将系统剪贴板的内容复制到正在用Vim编辑的文件，
using "+p command (or <C-r>+ from the Insert mode)，如果在d和y前面
加上`"+`，那么内容就会被复制到系统剪贴板。

`"*`选择寄存器，在X11系统中，有个叫主剪贴板的，代表当前选择的内容，
通过鼠标中间键可以复制内容，对应的是该寄存器，在Win和Mac中没有该
剪贴板，所以两个寄存器功能一样。

`"=`表达式寄存器，触发后直接进入命令模式。

以下是只读寄存器：
`"%`当前文件名，`"#`前一个文件的名称，`".`前一次插入的文本，
`":`前一次Ex命令，`"/`前一次查找模式

61. Replace a Visual Selection with a Register. p149
该模式下要注意，会重写无名寄存器，如果undo之后，想再重复，无名寄存器
的内容可能已经被修改

改变两个词的位置，例子在p151，步骤：先移动到要删除的单词前，删除单词，
打上标识，移到要变更的单词前，ve，p，回到刚才删除的位置，P

2017-06-05 22:04:17 - 2017-06-05 22:41:53 (p151-p156)

62. Paste from a Register. p151
`p`将寄存器中的内容粘贴到光标位置后，`P`在光标前的位置插入。
这个行寄存器和字符寄存器有关，`:h linewise-register`，作者认为这两个方式让
其经常犯错，所以他更常的是在插入模式下直接`<C-r>{register}`来进行插入。
`gp, gP`，在行识别寄存器中，该命令会将光标放在复制文本的末尾而非前面

63. Interact with the System Clipboard. p154
除了用Vim内置的put命令，有时也可以使用系统的粘贴命令，使用该命令有时
会有奇怪的结果，在终端下使用vim的情况，通过设置'paste'选项能够避免该情况。
`:set paste`，启用后通常自己创建的映射在插入模式下就无法工作，因此可以通过
设置`:set pastetoggle=<f5>`来启用和关闭该设置。
使用`"+p`能够复制系统剪贴板而又不会出现该问题。










