### Python面向对象基本概念及用法

2016-09-18 13:13:44 - 2016-09-18 13:45:20 - (p625-p634)

2016-09-19 21:49:22 - 2016-09-19 22:33:22 - (p641-p653)

>>>programming in Python is really a matter of *incremental prototyping*--
you write some code, test it, write more code, test again, and so on.

2016-09-20 13:16:35 - 2016-09-20 13:45:44 

p653-p659

2016-09-20 21:51:21 - 2016-09-20 22:52:13

p661-p666

P666 有关正确显示示例对应的类名及包含的属性

2016-09-21 07:02:07 - 2016-09-21 07:21:50
p666 - p672

书写工具类的考虑，方法被子类重写问题，可以明确某些方法的私有性

p700 pickle、dbm、shelve介绍

2016-09-21 12:53:42 - 2016-09-21 13:45:00 

p672 - p681(9) 

when Python pickles a class instance, it records its self instance attributes,
along with the name of the class it was created from and the module where the class
lives.

2016-09-21 21:25:41 - 2016-09-21 21:57:16
p681 - p686(5)

p684: When attached to classes, names are shared; in instances, name
record per-instance data, not shared behavior or data.

*class method*: receive a class when called instead of an instance, and can be used to
manage per-class data.

2016-09-21 22:08:07 - 2016-09-21 22:49:33
p686 - p696

*abstract superclass*: a class that expects parts of its behavior to be provided by
its subclasses.

2016-09-22 12:42:19 - 2016-09-22 13:24:11

p696 - p705(9)

2016-09-23 07:00:40 - 2016-09-23 07:24:44

p705 - p710(5)

双下划线开头和结尾，区别于自定义的方法

2016-09-26 12:47:23 - 2016-09-26 13:37:15

p710 - p718

The best and fastest way to accomplish a task in Python is often also the simplest.

2016-09-26 21:38:20 - 2016-09-26 23:04:29

p718 - p725

对于迭代情况，`__iter__`方法更方便书写，因为无需考虑索引；
`__contains__`适用于对所属关系优化的特殊情况。

2016-09-27 21:01:21 - 2016-09-27 21:28:16

p725 - p727(2)

2016-09-28 06:18:02 - 2016-09-28 06:50:08

p727 - p737(10)

`__bool__`和`__len__`

在3.0版本上的叫`__bool__`，2.6版本的叫`__nonzero__`，两个版本的均有`__len__`方法。


2016-09-28 19:47:40 - 2016-09-28 20:34:06

p737 - p745(8)

2016-09-28 21:03:34 - 2016-09-28 21:51:04

p745 - p757(12)

2016-10-06 22:37:28 - 2016-10-06 23:24:58

p757 - p762(5)

多重继承

p757涉及多重继承查找属性的顺序。"Mix-ins"

2016-10-08 06:59:31 - 2016-10-08 07:30:02

p762 - p763 

p762提及使用`__repr__`时循环调用的情况，涉及显示类中的方法，在需要`print`方法时，
该方法又会调用自身的`__repr__`方法，造成了循环调用，最终`RuntimeError: maximum recursion depth exceeded`的错误。

2016-10-08 21:15:10 - 2016-10-08 22:21:09

p763 - p769

2016-10-09 06:13:26 - 2016-10-09 06:59:58

p769 - p773

工厂模式：

多重继承：为了让当前类具有已有的多个类的属性及方法而采取的一种方式。
(继承了多个父类的情况下，当需要混合多个基于类的package时非常有用，
继承的类属性的查找循序按照继承的类，由左到右查找。)

代理：将对某些行为的处理交给某个类去处理，这个类就是代理。

组合：根据需要调用不同的类生成相对应的实例。

bound methods：结合具体的实例和方法，可以不用传入具体的实例直接调用，
因为原始的实例扔保留。

假私有属性(pseudo private attribute)的作用：一些属性仅在类内部使用，
不想让外界直接访问的情况下用。

2016-10-09 20:14:20 - 2016-10-09 21:31:49
p773 - p783(11)

从2.2版本开始，Python允许对内置的类型直接进行继承。

type和object的关系p783

2016-10-09 21:51:39 - 2016-10-09 22:10:19
p783- p791(8)

在多重继承中显示的调用父类中要用的方法（存在多个同名方法的情况下）。p786

,w,i 更新日志wiki

2016-10-10 21:43:03 - 2016-10-10 22:45:11
p791 - p801(11)

slot的相关讨论在p790-791[[__slot__]]

p796[[static methods]]

2016-10-11 20:35:00 - 2016-10-11 22:09:48

p801 - p806

[[Function Decorator]]

2016-10-12 21:22:04 - 2016-10-12 22:39:39
p806 - p817(12)

815开始是练习题
[[Class Decorator]]

p807
Metaclass是个类似基于类的高级工具，很多功能跟装饰器重叠。

2016-10-13 21:52:35 - 2016-10-13 23:08:15
p817 - p818

练习题。

2016-10-17 22:08:04 - 2016-10-17 23:03:55
p818 - p818
练习5



