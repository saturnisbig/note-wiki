### 代码示例

新增一个Animal子类，不必对`run_twice()`做任何修改，实际上，任何依赖`Animal`作为参数
的函数或方法都可以不加修改地正常运行。

对于一个变量，我们只需知道它是`Animal`类型，无需确切知道它的子类型，就可以放心
的调用`run()`方法，而具体调用的方法是作用在哪个对象上，由运行时对象的确切类型
决定，这就是多态真正的威力：调用方只管调用，不管细节，而当我们新增一种`Animal`
的子类时，只需确保`run()`方法编写正确，不用管原来的代码是如何调用的。这就是
著名的"开闭"原则：对拓展开放(允许新增`Animal`子类；对修改封闭：不需要修改依赖
`Animal`类型的`run_twice`等函数)


    class Animal(object):
        def run(self):
            print "Animal is running!"
    
    
    class Cat(Animal):
        def run(self):
            print "Cat is running!"
    
    
    class Dog(Animal):
        def run(self):
            print "Dog is running!"
    
    
    
    def run_twice(animal):
        """Get the animal run twice
    
        :animal: Animal instance
    
        """
        animal.run()
        animal.run()
    
    
    
    if __name__ == "__main__":
        cat = Cat()
        dog = Dog()
        print "Get the Cat instance run.==="
        run_twice(cat)
        print "Get the Dog instance run.==="
        run_twice(dog)
