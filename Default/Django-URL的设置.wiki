
## Django URL配置


===== Django如何处理请求

比如收到这样一个请求:"http://localhost:8000/hello/"

1.请求转入对应的url
2.Django通过ROOT_URLCONF配置来决定根URLconf
3.Django在URLconf中的所有URL模式中查找第一个匹配/hello/条目
4.根据匹配的条目，调用对应的视图函数
5.视图函数返回一个!HttpResponse 
6.Django转换!HttpResponse为一个合适的HTTP Response，以web页面显示


===== URL配置的方法

示例模板：

- 不带命名组匹配的

    from django.conf.urls import url
    from . import views
    urlpatterns = [
        # 匹配2003年文章视图
        url(r'^articles/2003/$', views.special_case_2003),
        # 匹配某一年下的所有文章,对应的view函数`year_archive(request, '2003')`
        url(r'^articles/([0-9]{4})/$', views.year_archive),
        # 匹配具体的某篇文章
        url(r'^articles/([0-9]{4})/([0-9]{2})/([0-9]+)/$', views.article_detail),
    ]


- 使用带named-groups 正则表达式的

    # 使用带named-groups正则表达式的示例
    from django.conf.urls import url
    from . import views
    urlpatterns = [
        # 匹配2003年文章视图
        url(r'^articles/2003/$', views.special_case_2003),
        # 匹配某一年下的所有文章,对应的view函数`year_archive(request, year='2003')`
        url(r'^articles/(?<year>[0-9]{4})/$', views.year_archive),
        # 匹配具体的某篇文章
        url(r'^articles/([0-9]{4})/([0-9]{2})/([0-9]+)/$', views.article_detail),
    ]

- 包含其他的URLconfs，可以避免太多的重复

    # 方式一
    urlpatterns = [
        # 注意最后没有$符号
        url(r'community/', include('django_website.aggregator.urls')),
        url(r'contact/', include('django_website.contact.urls')),
    ]
    # 方式二
    extral_patterns = [
        url(r'^reports/$', credit_views.report),
        url(r'^reports/(?P<id>[0-9]+)/$', credit_views.report),
        url(r'^charge/$', credit_views.charge),
    ]
    urlpatterns = [
        # 也可把上面中括号中的内容直接放到include中
        url(r'credit/', include(extral_patterns)),
    ]

- 嵌套参数？

    urlpatterns = [
        url(r'blog/(page-(\d+)/)?$', blog_articles), # bad
        url(r'blog/(?:page-(?P<page_number>\d+)/)?$', blog_articles), # good
    ]

- 传递extra选项给view方法(同步的时候可用)


    urlpatterns = [
        url(r'^articles/(?P<year>[0-9]{4})/$', views.year_archive, {'foo': 'bar'}),
    ]


====== URLs的逆映射

不同层提供了不同的方式：
模板中：`url`模板标签
Python code:`django.core.urlresolvers.reverse()`方法
对于高级的与处理Model实例的URLs有关的：`get_absolute_url`方法

代码示例：

    # urls.py
    from django.conf.urls import url
    from . import views
    
    urlpatterns = [
        url(r'articles/([0-9]{4})/$', views.year_archive, name='news-year-archive'),
    ]
    # template 
    <a href="{% url 'news-year-archive' 2012 %}">2012 Archive</a>
    # python code
    def redirect_to_year(request):
        year = 2006
        return HttpResponseRedirect(reverse('news-year-archive', args=(year, )))


===== namespace和URL设置



===== 注意点

- *URLconf不会去查找request方法，只负责将请求传给对于的view方法*

- URL获取的参数都是字符串类型

- 可以给view方法设置默认参数

>>>
    urlpatterns = [
        url(r'^blog/$', views.page),
        url(r'^blog/(?P<num>[0-9]+)/$', views.page),
    ]
    def page(request, num='1'):
        pass
        

- 通过named groups方式捕捉到的参数可以传递到include方法包含的url中
